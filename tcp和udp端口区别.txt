
UDP提供了无连接通信，且不对传送数据包进行可靠性保证，适合于一次传输少量数据，UDP传输的可靠性由应用层负责。常用的UDP端口号有：
DNS域名解析服务 53  TFTP 69  SNMP 161

TCP、UDP和HTTP关系的
1、TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层。
在网络层有IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议。
在传输层中有TCP协议与UDP协议。
在应用层有HTTP, FTP、TELNET、SMTP、DNS等协议。

ping用的icmp协议， 独立的协议，既不是tcp也不是udp，不使用任何端口。
IP/ICMP 在第三层：网络层
TCP/UDP 在第四层：传输层 

tcp协议和udp协议的差别
           TCP                UDP
是否连接   面向连接           面向非连接
传输可靠性 可靠               不可靠
应用场合   传输大量数据       少量数据
速度       慢                 快

TCP（传输控制协议）
TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议
建立连接，形成传输数据的通道, 在连接中进行大数据传输（数据不受限制）, 通过三次握手完成连接，是可靠协议，安全送达, 必须建立连接，效率会稍低

UDP（用户数据报协议）
UDP 是User Datagram Protocol的简称， 中文名是用户数据报协议。在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。
将数据及源和目的封装成数据包中，不需要建立连接, 每个数据报的大小限制在64K之内, 因为无需连接，因此是不可靠协议


socket只是一种连接模式，不是协议
IP 协议对应于网络层，
TCP协议对应于传输层，
HTTP协议对应于应用层，
三者从本质上来说没有可比性，
socket则是对TCP/IP协议的封装和应用。  
可以说，TCP/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据
socket是对TCP/IP协议的封装，Socket本身并不是协议，而是一个调用接口（API），Socket接口定义了许多函数或例程，用以开发TCP/IP网络上的应用程序。
通过Socket，我们才能使用TCP/IP协议。


不管TCP还是UDP，既然都用于传输，为何要搞两个不同的协议呢？这就需要从网络中不同服务的需求来谈起。

在网络中，有些服务，如HTTP、FTP等，对数据的可靠性要求较高，在使用这些服务时，必须保证数据包能够完整无误的送达；
而另外一些服务，如DNS、即时聊天工具等，并不需要这么高的可靠性，高效率和实时性才是它们所关心的。
根据这两种服务不同的需求，也就诞生了面向连接的TCP协议，以及面向无连接的UDP协议。

这里的连接（Connection）和无连接（Connectionless）是网络传输中常用的术语，它们的关系可以用一个形象地比喻来说明，就是打电话和写信。

打电话时，一个人首先必须拨号（发出连接请求），等待对方响应，接听电话（建立了连接）后，才能够相互传递信息。通话完成后，还需要挂断电话（断开连接），才算完成了整个通话过程。
写信则不同，你只需填写好收信人的地址信息，然后将信投入邮局，就算完成了任务。此时，邮局会根据收信人的地址信息，将信件送达指定目的地。
打电话时，通话双方必须建立一个连接，才能够传递信息。连接也保证了信息传递的可靠性，因此，面向连接的协议必然是可靠的。

无连接就没有这么多讲究，它不管对方是否有响应，是否有回馈，只管将信息发送出去。
就像信件一旦进了邮箱，在它到达目的地之前，你没法追踪这封信的下落；接收者即使收到了信件，也不会通知你信件何时到达。
因此我们常说，面向无连接的协议也是不可靠的。当然，邮局会尽力将右键送到目的地，99%的情况信件会安全到达，但在少数情况下也有例外。

面向连接的协议比面向无连接的协议在可靠性上有着显著的优势，但建立连接前必须等待接收方响应，传输信息过程中必须确认信息是否传到，断开连接时需要发出响应信号等，加大了面向连接协议的资源开销。
具体到TCP和UDP协议来说，除了源端口和目的端口，TCP还包括序号、确认信号、数据偏移、控制标志（通常说的URG、ACK、PSH、RST、SYN、FIN）、窗口、校验和、紧急指针、选项等信息，UDP则只包含长度和校验和信息。
UDP数据报比TCP小许多，这意味着更小的负载和更有效的使用带宽。许多即时聊天软件采用UDP协议，与此有莫大的关系


