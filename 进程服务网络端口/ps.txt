



# ps -eo pid,command,start_time,start,etime			查看进程的开始时间, 运行时间
# ps -o command,start_time,start,etime -p 1			查看指定进程的开始时间, 运行时间
# ps -o pid,command,start_time,start,etime -p `pgrep rsync `
# ps -eo pid,command,start_time,start,etime | grep ssh	

# ps -o lstart -p 1		进程开始的详细时间	
	




# cat /proc/21535/status			根据进程ID查看进程详细
# ps -eal | awk '{ if ($2 == "Z") {print $4}}' | kill -9 		清除僵死进程
# ps -p 1		查看pid为1的里程是否存在

# ps -ef  查看查看进程的父进程ID (PPID)
# ps aux
# pgrep httpd
# ps aux | sort -nr -k4| head 		列出头十个最耗内存的进程
# ps -u root 	 显示指定用户信息
# ps aux | wc –l		统计当前的进程数目
# ps aux | grep httpd | wc –l		过滤统计指定的进程数
# ps -aux |grep httpd或者ps -ef |grep httpd	检查进程名包含httpd的进程运行状况
# ps -aux  		查看系统所有的进程 
# ps -elf	
# ps -lA   	 	也是能够查看所有系统的数据 
# ps axjf   	连同部分进程树状态 
# ps aux | egrep '(cron|syslog)'		找出与 cron 与 syslog 这两个服务有关的 PID 号码
# ps -o pid,ppid,pgrp,session,tpgid,comm		输出指定的字段
	


a  显示所有进程
-a 显示同一终端下的所有程序
-A 显示所有进程
c  显示进程的真实名称
-N 反向选择
-e 等于“-A”
e  显示环境变量
f  显示程序间的关系
-H 显示树状结构
r  显示当前终端的进程
T  显示当前终端的所有程序
u  指定用户的所有进程
-au 显示较详细的资讯
-aux 显示所有包含其他使用者的行程 


linux上进程有5种状态: 
1. 运行(正在运行或在运行队列中等待) 
2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号) 
3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) 
4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放) 
5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行) 
ps工具标识进程的5种状态码: 
D 不可中断 uninterruptible sleep (usually IO) 
R 运行 runnable (on run queue) 
S 中断 sleeping 
T 停止 traced or stopped 
Z 僵死 a defunct ("zombie") process 
<    高优先级
N    低优先级
L    有些页被锁进内存
s    包含子进程
+    位于后台的进程组；
l    多线程，克隆线程  multi-threaded (using CLONE_THREAD, like NPTL pthreads do)


# ps -aux
USER     PID    %CPU    %MEM    VSZ  RSS     TTY   STAT  START       TIME     COMMAND
root         1      0.0        0.0       1672  516       ?        S       Apr21      0:00    init [5]        
root         2      0.0        0.0           0    0       ?        S       Apr21      0:00    [migration/0]
root         3      0.0        0.0           0    0       ?        SN      Apr21      0:00    [ksoftirqd/0]
root         4      0.0        0.0           0    0       ?        S       Apr21      0:00    [migration/1]
root         5      0.0        0.0          0    0        ?        SN      Apr21      0:00    [ksoftirqd/1]
root         6      0.0        0.0          0    0        ?        S       Apr21      0:00    [migration/2]

USER：表示该进程所属用户
PID：该进程的PID号
%CPU     进程占用CPU百分比
%MEM    进程占用内存百分比
VSZ         虚拟内存占用大小      单位：kb（killobytes）
RSS        实际内存占用大小       单位：kb（killobytes）
TTY：表示登陆端口
STAT：和上面介绍的进程状态一样（R/S/D/T/Z进程）
START：该进程触发启动的时间
TIME：表示该进程占用CPU的时间
COMMAND：表示触动该进程的命令

僵尸进程
通常，造成僵尸进程的原因是该进程应该已经执行完毕，或是因故应该要终止了，但是该进程的父进程却无法完整将该进程结束掉，而造成那个进程一直在内存当中。如果你发现某个进程的CMD后面接上<defunct>时，就代表该进程是僵尸进程，例如：
1  2598  2598  2598 ?           -1 Ss       0   0:00 /usr/sbin/hcid<defunct>
当系统不稳定的时候就容易造成所谓的僵尸进程，可能是因为程序写的不好，或者用户操作不当所造成的。如果系统出现很多僵尸进程，记得要找出父进程，然后好好跟踪，好好优化主机环境。如果实在不行就只有reboot了

##############################################################################
