

# swapon -s    等价于 cat /proc/swaps ,包括 文件 和 分区 的详细信息

1、什么是交换分区
交换分区的功能就是在内存不够的情况下，操作系统先把内存中暂时不用的数据，存到硬盘的交换空间，
腾出内存来让别的程序运行，和Windows的虚拟内存（pagefile.sys）的作用是一样的。

2、关于swap交换分区的设置
一种流行的、以讹传讹的说法是，安装Linux系统时，交换分区swap的大小应该是内存的两倍。
也就是说，如果内存是2G，那么就应该分出4G的硬盘空间作为交换空间,其实这是严重的浪费。
真实的情况是：可以根据你系统内存的大小，以及所使用的程序，自行决定交换分区的大小，甚至可以完全不用交换分区！
做一个假设：如果你的内存足够大，极少出现内存不足的情况，那么你就不需要交换分区。事实上，日常使用很少能用完全部的内存。
在用不完内存容量的情况下，还要划出它两倍的硬盘空间用于内存交换，这不是浪费吗？
可以说，在你内存基本够用的情况下，完全可以不要交换空间。在Windows下也是一样，在系统属性中，把虚拟内存设置为0，系统依然运行的很好。
当然，如果你用的是服务器，还是要有专门的虚拟内存，有备无患。但是虚拟内存的大小不一定非要内存的两倍。 

5、添加交换空间
Linux下可以创建两种类型的交换空间，一种是swap分区，一种是swap文件。
前者适合有空闲的分区可以使用，后者适合于没有空的硬盘分区，硬盘的空间都已经分配完毕。
推荐你添加一个交换分区；不过，若你没有多少空闲空间可用，则添加交换文件。
http://www.cnblogs.com/LubinLew/p/Linux_SwapSpace.html






为Linux增加虚拟内存（也就是交换分区）
若# free -m查看free的内存已经不多，可以考虑增加虚拟内存swap.
             total       used       free     shared    buffers     cached
Mem:           512        182        330          0          0          0
-/+ buffers/cache:        182        330
Swap:            0          0          0
上图Swap为0，因些可以增加虚拟内存swap.

# df -m查看各分区当前使用情况
Type following command to create 2G swap file (1024 * 2048MB = 2097152 block size):
# dd if=/dev/zero of=/swapfile1 bs=1024 count=2097152
# mkswap /swapfile1	 Set up a Linux swap area:
# swapon /swapfile1 	Activate /swapfile1 swap space immediately:
e) To activate /swapfile1 after Linux system reboot, add entry to /etc/fstab file. Open this file using text editor such as vi:
# vi /etc/fstab
Append following line:
/swapfile1 swap swap defaults 0 0
So next time Linux comes up after reboot, it enables the new swap file for you automatically.
g) How do I verify swap is activated or not?
Simply use free command:
# free -m
如果想关闭虚拟内存或者向扩大， 要先disable
# swapoff /swapfile1

或出现以下问题
swapon: /swapfile1: Operation not permitted
说明是OpenVZ VM的VPS，不能添加交换文件


我们知道，直接从物理内存读写数据要比从硬盘读写数据要快的多，因此，我们希望所有数据的读取和写入都在内存完成，而内存是有限的，这样就引出了物理内存与虚拟内存的概念。
物理内存就是系统硬件提供的内存大小，是真正的内存，相对于物理内存，在linux下还有一个虚拟内存的概念，虚拟内存就是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为交换空间（Swap Space）。
作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换空间，这样以来，物理内存得到了释放，这块内存就可以用于其它目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理内存。

linux的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存

首先，Linux系统会不时的进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux也会交换出暂时不用的内存页面。这可以避免等待交换所需的时间。
其次，linux进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，linux内核根据”最近最经常使用“算法，仅仅将一些不经常使用的页面文件交换到虚拟内存，
有时我们会看到这么一个现象：linux物理内存还有很多，但是交换空间也使用了很多

最后，交换空间的页面在使用时会首先被交换到物理内存，如果此时没有足够的物理内存来容纳这些页面，它们又会被马上交换出去，
如此以来，虚拟内存中可能没有足够空间来存储这些交换页面，最终会导致linux出现假死机、服务异常等问题，linux虽然可以在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。

虚拟内存原理：
在系统中运行的每个进程都需要使用到内存，但不是每个进程都需要每时每刻使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。

在Linux内存管理中，主要是通过“调页Paging”和“交换Swapping”来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。
交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。

分页(Page)写入磁盘的过程被称作Page-Out，分页(Page)从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。
当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。
尽管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作thrashing(颠簸)。


