

# la m?s*		匹配mysql.sql
# la m?sql.sql	匹配mysql.sql
# ls -ald [^a-h]* 	列出所有不以a-h开关的文件
# ls -ald [!a.]*	列出除以a,.号开头以外的文件，等同于ls -ald [^a.]*
# la [a-h]*.txt 	列出有在以a-h开关的所有txt文件

*：0个或多个任意字符
?: 一个任意字符
[]: 范围
[^] : 非


Bash Shell本身不支持正则表达式，使用正则表达式的是Shell命令和工具，如grep, sed, awk等，但是，Bash Shell可以使用正则表达式中的一些元字符实现通配(Globbing)功能，通配是把一个包含通配符的非具体文件名扩展存储在计算机、服务器或网络上的一批具体文件名的过程。最常用的通配符包括正则表达式字符：?, *, [], {}, ^等。这些元字符在通配中的意义与正则表达式中的意义不完全一致，*符号不再表示其前面字符的重复，而是表示任意位的字符，?字符表示一个任意字符，^符号代表取反。下面以ls命令来举例通配符的使用：
#列出以.awk结尾文件的详细信息
# ls -l *.awk		列出以0开头、后面跟1个字符且以.pem为后缀的文件，
# ls -l 0?.pem		#列出以a~h范围内字母开头，以.awk结尾的文件
# ls -l [a-h]*.awk   #[]符号的意义与正则表达式中的[]符号的意义一样
通配中的{}符号表示一组表达式的集合，{}符号内的表达式是"或"的关系
# ls -l {[a-h]*.awk,0?.pem}  #表达式之间不能有空格
通配的结果由计算机搜索大量的文件和目录进行匹配而输出，通配对处理能力和内存资源有很高的需求。黑客输入包含通配符的文件名故意让服务器重复和连续不断地进行通配可能引起拒绝服务攻击。因此，大型服务器经常通过限制服务器执行通配功能的次数、限制一个具体用户每次输入的通配符或者如果通配符太普通，则拒绝执行通配等方法来提高服务器的安全性。
内部变量GLOBIGNORE保存了通配时所忽略的文件名集合，应该说，?,*,[],{},^五个符和GLOBIGNORE变量构成了Shell通配的所有内容。

http://www.cnblogs.com/leon89/archive/2013/01/23/2873015.html
