
nginx禁止访问所有.开头的隐藏文件设置
location ~* /.* {
deny all;
}

nginx禁止访问目录，禁止访问path目录
location ^~ /path {
deny all;
}

可以把path换成实际需要的目录，目录path后是否带有"/",带"/"只禁止访问目录，不带"/"禁止访问目录中的文件

将cad/file目录的PHP执行权限去掉。
location ~ /cad/file/.*\.(php|py|asp|aspx)$ {
deny all;
}

验证方法，成功则返回403
curl -I http://192.168.0.159/cad/file/index.php


2、多个目录去掉PHP执行权限
location ~* /(attachment|upload)/.*\.php$ {
deny all;
}

验证方法
curl -I http://192.168.0.159/cad/upload/index.php

root   /home/html;
location ~ /cad/file/.*\.php$ {			去掉/home/html/cad/file/目录下php执行权限
deny all;
}

验证方法
curl -I http://192.168.0.159/cad/file/index.php


通过设置nginx的client_max_body_size解决nginx+php上传大文件的问题：
用nginx来做webserver的时，上传大文件时需要特别注意client_max_body_size这个参数,否则会中断在nginx的请求中,在php中是无法记录到访问的.

好吧,偶然去了解Nginx的Conf档的配置，发现php.ini的参数还能透过Nginx的conf来间接定义。
用法如下:

fastcgi_param  PHP_VALUE  "参数名=值";


放在PHP的Location段中即可（不是用nginx+php-fpm跑PHP的请自觉无视~） 例如一台机器上放了好多的站的童鞋,为了增加安全性,可以使用下面的配置
fastcgi_param  PHP_VALUE  "open_basedir=$document_root:/tmp/:/proc/";

这就把PHP的读取路径权限限制死了,限制在了当前的站点根路径以及缓存和线程执行路径下,增加了服务器的安全性
然后再拓宽,可以直接用来禁用一些危险的PHP函数

fastcgi_param  PHP_VALUE  "disable_functions=exec,passthru,shell_exec,system,proc_open,popen";

配置nginx支持pathinfo模式

location ~ \.php {
fastcgi_pass   127.0.0.1:9000;
fastcgi_index  index.php;
include fastcgi_params;
expires      60s;

set $path_info "";
set $real_script_name $fastcgi_script_name;
if ($fastcgi_script_name ~ "^(.+?\.php)(/.+)$") {
set $real_script_name $1;
set $path_info $2;
}

fastcgi_param SCRIPT_FILENAME $document_root$real_script_name;
fastcgi_param SCRIPT_NAME $real_script_name;
fastcgi_param PATH_INFO $path_info;

}


禁止搜索引擎蜘蛛爬虫抓取
location / {
if ($http_user_agent ~* "spider" ) {
return 403;
}
}

之记录搜索引擎蜘蛛爬虫抓取
location / {
if ($http_user_agent ~* "spider" ) {
access_log /home/www/spider.log;
}
}

location / {
if ($request  ~* "flexpager" ){
access_log  /home/html/cad/ajax/access.log ;
}
}

针对特定URL的操作
location ~* /index.php$ {
access_log  /home/html/cad/ajax/access.log ;
#rewrite ^/(.*)$ http://www.baidu.com?2221 last;
}

验证方法
curl -I http://192.168.0.159/index.php



server_name的先后顺序的不同，对PHP程序中使用$_SERVER["SERVER_NAME"]或getenv('SERVER_NAME')获取服务器域名是有影响的：
至于 PHP 的 $_SERVER["SERVER_NAME"]，在 nginx 中默认是由 nginx 的变量 $server_name 提供，这时它和重定向没有关系，始终是 server_name 设置中的第一个域名，
但这是可以被改变的，在你的 nginx 配置中找到 fastcgi_param 部分，修改
fastcgi_param  SERVER_NAME    $server_name;
为
fastcgi_param  SERVER_NAME    $host;