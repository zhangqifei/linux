

http://www.cnblogs.com/oshine/p/3953259.html
https://www.oschina.net/question/12_24613

几台后端web服务器需要考虑文件共享,数据库共享,session共享问题.文件共享可以使用nfs,共享存储（fc,ip存储都行）+redhat GFS集群文件系
统,rsync+inotify文件同步等.小规模的集群中使用更多的是nfs.对于内容管理系统,单台进行发布信息，向多台同步使用rsync+inotify就是个不错的选择.

session共享问题是一个大问题,如果nginx采用ip_hash的轮询方法,每个ip在一定时间内会被固定的后端服务器,这样我们不用解决session共享问题.反之,
一个ip的请求被轮询分发到多台服务器上,就要解决session共享的问题,可以使用nfs共享session,把session写入mysql或者memcache等方法


nginx的upstream目前支持的5种方式的分配

主要有： 
轮询技术：客户端请求服务器轮流转发。 
IP绑定：同一ip地址的客户端，始终请求同一台服务器。 
最少连接：把请求转发给最空闲的服务器。


1、轮询（默认） 
每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。 
upstream backserver { 
	server 192.168.0.14; 
	server 192.168.0.15; 
} 

2、指定权重 
指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。 
upstream backserver { 
	server 192.168.0.14 weight=10; 
	server 192.168.0.15 weight=10; 
} 

3、IP绑定 ip_hash 
每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。 
upstream backserver { 
	ip_hash; 
	server 192.168.0.14:88; 
	server 192.168.0.15:80; 
} 

4、fair（第三方） 
按后端服务器的响应时间来分配请求，响应时间短的优先分配。 
upstream backserver { 
	server server1; 
	server server2; 
	fair; 
} 

5、url_hash（第三方） 
按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。 
upstream backserver { 
	server squid1:3128; 
	server squid2:3128; 
	hash $request_uri; 
	hash_method crc32; 
} 

在需要使用负载均衡的server中增加 

proxy_pass http://backserver/; 
upstream backserver{ 

ip_hash; 
server 127.0.0.1:9090 down; (down 表示单前的server暂时不参与负载) 
server 127.0.0.1:8080 weight=2; (weight 默认为1.weight越大，负载的权重就越大) 
server 127.0.0.1:6060; 
server 127.0.0.1:7070 backup; (其它所有的非backup机器down或者忙的时候，请求backup机器) 
} 



http://www.cnblogs.com/oshine/p/3964362.html
要说道每个分身的能力如何复制过去，是不是要具有相同的代码。怎么办？

当然这些都有实际成熟的工具：
1. 文件共享（大家都清楚）
2. 文件同步 （rsync）  
3.  分布式文件系统 （moosefs）

他们都有各自的优缺点，选择适合自己的就行。

